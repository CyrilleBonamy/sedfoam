/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.4.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      Ub;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform  ( 0 0 0);

boundaryField
{
    cylinder
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }
    inlet
    {
        type            fixedValue;
        value           #codeStream
        {
            codeInclude
            #{
                #include "fvCFD.H"
            #};

            codeOptions
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude
            #};
            codeLibs
            #{
                -lfiniteVolume \
                -lmeshTools
            #};
            code
            #{
                const IOdictionary& d = static_cast<const IOdictionary&>
                (
                    dict.parent().parent()
                );
                const fvMesh& mesh = refCast<const fvMesh>(d.db());
                const label id = mesh.boundary().findPatchID("inlet");
                const fvPatch& patch = mesh.boundary()[id];
                vectorField Ub(patch.size(), vector(0, 0, 0));
                scalar t = d.db().time().value();
                if (t<=4.0)
                { 
                    forAll(Ub, i)
                    {
                        const scalar y = patch.Cf()[i][1];
                        Ub[i] = (0.1 + 0.9*(t/4.0))*vector(0.04318/0.41*log(30*(y+0.0251)/9e-4),0,0);
                    }
                    Ub.writeEntry("", os);
                }
                else
                {
                    forAll(Ub, i)
                    {
                        const scalar y = patch.Cf()[i][1];
                        Ub[i] = vector(0.04318/0.41*log(30*(y+0.0251)/9e-4),0,0);
                    }
                    Ub.writeEntry("", os);
                 }
            #};

        };
    }
    outlet
    {
        type            inletOutlet;
        inletValue      uniform (0 0 0);
        value           uniform (0 0 0);
    }
    lateralfront
    {
        type            empty;
    }
    lateralback
    {
        type            empty;
    }
    bottom    
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }
    surface
    {
        type            symmetryPlane;
    }
}


// ************************************************************************* //
